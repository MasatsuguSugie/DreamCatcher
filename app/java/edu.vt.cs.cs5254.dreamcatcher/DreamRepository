package edu.vt.cs.cs5254.dreamcatcher

import android.content.Context
import androidx.lifecycle.LiveData
import androidx.room.Room
import edu.vt.cs.cs5254.dreamcatcher.database.Dream
import edu.vt.cs.cs5254.dreamcatcher.database.DreamDatabase
import edu.vt.cs.cs5254.dreamcatcher.database.DreamEntry
import edu.vt.cs.cs5254.dreamcatcher.database.DreamWithEntries
import java.io.File
import java.util.*
import java.util.concurrent.Executors

private const val DATABASE_NAME = "dream_database"

class DreamRepository private constructor(context: Context) {

    private val database: DreamDatabase = Room.databaseBuilder(
        context.applicationContext,
        DreamDatabase::class.java,
        DATABASE_NAME
    ).build()

    private val dreamDao = database.dreamDao()

    private val executor = Executors.newSingleThreadExecutor()

    private val filesDir = context.applicationContext.filesDir

    fun getPhotoFile(dream: DreamWithEntries): File = File(filesDir, dream.photoFileName)

    fun getDreams(): LiveData<List<Dream>> = dreamDao.getDreams()

    fun getDreamWithEntries(dreamId: UUID): LiveData<DreamWithEntries> =
        dreamDao.getDreamWithEntries(dreamId)

    fun updateDreamWithEntries(dreamWithEntries: DreamWithEntries) {
        executor.execute {
            dreamDao.updateDreamWithEntries(dreamWithEntries)
        }
    }

    fun reconstructSampleDatabase() = dreamDao.reconstructSampleDatabase()

    fun addDream(dream: Dream) {
        executor.execute {
            dreamDao.addDream(dream)
        }
    }

    fun addDreamEntry(dreamEntry: DreamEntry) {
        executor.execute {
            dreamDao.addDreamEntry(dreamEntry)
        }
    }

    fun deleteAllDreams() {
        executor.execute {
            dreamDao.deleteAllDreams()
        }
    }

    companion object {
        private const val TAG = "DreamRepository"

        private var INSTANCE: DreamRepository? = null

        fun initialize(context: Context) {
            if (INSTANCE == null) {
                INSTANCE = DreamRepository(context)
            }
        }

        fun get(): DreamRepository {
            return INSTANCE ?: throw IllegalStateException("DreamRepository must be initialized")
        }
    }
}
