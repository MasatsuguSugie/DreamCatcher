package edu.vt.cs.cs5254.dreamcatcher

import android.graphics.BlendMode
import android.graphics.BlendModeColorFilter
import android.graphics.Color
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.text.format.DateFormat
import android.util.Log
import android.view.*
import android.widget.Button
import android.widget.CheckBox
import android.widget.EditText
import android.widget.ImageView
import androidx.annotation.RequiresApi
import androidx.core.content.FileProvider
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import com.google.android.material.floatingactionbutton.FloatingActionButton
import edu.vt.cs.cs5254.dreamcatcher.database.*
import edu.vt.cs.cs5254.dreamcatcher.util.CameraUtil
import java.io.File
import java.util.*

private const val TAG = "DreamDetailFragment"
private const val ARG_DREAM_ID = "dream_id"
private const val REQUEST_ADD_COMMENT = 0
private const val DIALOG_ADD_COMMENT = "DialogAddComment"

class DreamDetailFragment : Fragment(), AddDreamEntryFragment.Callbacks {

    // ======================================================
    // model fields, view fields, and view-model field
    // ======================================================

    private lateinit var dream: Dream
    private lateinit var dreamEntries: List<DreamEntry>
    private lateinit var photoFile: File
    private lateinit var photoUri: Uri

    private lateinit var titleField: EditText
    private lateinit var dreamButton0: Button
    private lateinit var dreamButton1: Button
    private lateinit var dreamButton2: Button
    private lateinit var dreamButton3: Button
    private lateinit var dreamButton4: Button

    private lateinit var isRealizedCheckBox: CheckBox
    private lateinit var isDeferredCheckBox: CheckBox

    private lateinit var entryButtons: List<Button>

    private lateinit var addCommentButton: FloatingActionButton

    private lateinit var photoView: ImageView

    // view-model
    private val dreamDetailViewModel: DreamDetailViewModel by lazy {
        ViewModelProvider(this@DreamDetailFragment).get(DreamDetailViewModel::class.java)
    }

    // options menu methods
    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        super.onCreateOptionsMenu(menu, inflater)
        inflater.inflate(R.menu.fragment_dream_detail, menu)

        val cameraAvailable = CameraUtil.isCameraAvailable(requireActivity())
        val menuItem = menu.findItem(R.id.take_dream_photo)
        menuItem.apply {
            Log.d(TAG, "Camera available: $cameraAvailable")
            isEnabled = cameraAvailable
            isVisible = cameraAvailable
        }
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.take_dream_photo -> {
                val captureImageIntent =
                    CameraUtil.createCaptureImageIntent(requireActivity(), photoUri)
                startActivity(
                    captureImageIntent
                )
                true
            }
            else -> return super.onOptionsItemSelected(item)
        }
    }

    // =======================================================
    // lifecycle functions
    // - onCreate: initialize model fields (construct a dream for testing)
    // - onCreateView: initialize view fields
    // - onViewCreated: update the UI
    // - onStart: define text listener and checkbox listeners
    // =======================================================

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setHasOptionsMenu(true)
        // initialize model fields
        dream = Dream()
        dreamEntries = listOf()
        val dreamId: UUID = arguments?.getSerializable(ARG_DREAM_ID) as UUID
        dreamDetailViewModel.loadDream(dreamId)
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_dream_detail, container, false)
        titleField = view.findViewById(R.id.dream_title) as EditText
        dreamButton0 = view.findViewById(R.id.dream_entry_0_button) as Button
        dreamButton1 = view.findViewById(R.id.dream_entry_1_button) as Button
        dreamButton2 = view.findViewById(R.id.dream_entry_2_button) as Button
        dreamButton3 = view.findViewById(R.id.dream_entry_3_button) as Button
        dreamButton4 = view.findViewById(R.id.dream_entry_4_button) as Button
        isRealizedCheckBox = view.findViewById(R.id.dream_realized) as CheckBox
        isDeferredCheckBox = view.findViewById(R.id.dream_deferred) as CheckBox

        entryButtons = listOf(
            dreamButton0, dreamButton1, dreamButton2, dreamButton3, dreamButton4
        )

        addCommentButton = view.findViewById(R.id.add_comment_fab) as FloatingActionButton

        photoView = view.findViewById(R.id.dream_photo) as ImageView

        return view
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        Log.d(
            TAG,
            "onViewCreated establishing observer from DreamDetailViewModel.dream to DreamFragment"
        )
        dreamDetailViewModel.dreamLiveData.observe(
            viewLifecycleOwner,
            Observer { dream ->
                dream?.let {
                    this.dream = dream.dream
                    this.dreamEntries = dream.dreamEntries
                    photoFile = dreamDetailViewModel.getPhotoFile(dream)
                    photoUri = FileProvider.getUriForFile(requireActivity(),
                    "edu.vt.cs.cs5254.dreamcatcher.fileprovider",
                    photoFile)
                    updateUI()
                }
            })
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    override fun onStart() {
        super.onStart()
        val titleWatcher = object : TextWatcher {
            override fun afterTextChanged(s: Editable?) {
                // do nothing
            }

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
                // do nothing
            }

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                dream.description = s.toString()
            }

        }
        titleField.addTextChangedListener(titleWatcher)

        isRealizedCheckBox.setOnCheckedChangeListener { _, isChecked ->
            onRealizedClicked(isChecked)
            isDeferredCheckBox.isEnabled = !isRealizedCheckBox.isChecked
            updateUI()
        }
        isDeferredCheckBox.setOnCheckedChangeListener { _, isChecked ->
            onDeferredClicked(isChecked)
            isRealizedCheckBox.isEnabled = !isDeferredCheckBox.isChecked
            updateUI()
        }
        addCommentButton.setOnClickListener {
            AddDreamEntryFragment().apply {
                setTargetFragment(this@DreamDetailFragment, REQUEST_ADD_COMMENT)
                show(this@DreamDetailFragment.parentFragmentManager, DIALOG_ADD_COMMENT)
            }
        }

    }

    override fun onStop() {
        super.onStop()
        dreamDetailViewModel.saveDream(DreamWithEntries(dream, dreamEntries))
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    private fun updateUI() {
        titleField.setText(dream.description)

        isRealizedCheckBox.apply {
            isChecked = dream.isRealized
            jumpDrawablesToCurrentState()
        }
        isDeferredCheckBox.apply {
            isChecked = dream.isDeferred
            jumpDrawablesToCurrentState()
        }
        updateEntryButtons()
        updatePhotoView()
    }

    private fun updatePhotoView() {
        if (photoFile.exists()) {
            val bitmap = CameraUtil.getScaledBitmap(photoFile.path, requireActivity())
            photoView.setImageBitmap(bitmap)
        } else {
            photoView.setImageDrawable(null)
        }
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    private fun updateEntryButtons() {
        dreamButton0.visibility = View.GONE
        dreamButton1.visibility = View.GONE
        dreamButton2.visibility = View.GONE
        dreamButton3.visibility = View.GONE
        dreamButton4.visibility = View.GONE

        val df =
            DateFormat.getMediumDateFormat(activity)
        val commentDate = df.format(dream.dateRevealed)

        for ((dreamEntries, button) in dreamEntries.zip(entryButtons)) {
            button.visibility = View.VISIBLE
            if (dreamEntries.kind == DreamEntryKind.COMMENT) {
                button.text = "${dreamEntries.comment} (${commentDate})"
                setCommentStyle(button)
            }
            if (dreamEntries.kind == DreamEntryKind.REVEALED) {
                button.text = dreamEntries.comment
                setRevealedStyle(button)
            }
            if (dreamEntries.kind == DreamEntryKind.DEFERRED) {
                button.text = dreamEntries.comment
                setDeferredStyle(button)
            }
            if (dreamEntries.kind == DreamEntryKind.REALIZED) {
                button.text = dreamEntries.comment
                setRealizedStyle(button)
            }
        }
    }

    private fun onRealizedClicked(isChecked: Boolean) {
        dream.isRealized = isChecked
        val realizedEntry = dreamEntries.filter { it.kind == DreamEntryKind.REALIZED }
        val newRealizedEntry = DreamEntry(
            comment = "Dream Realized",
            kind = DreamEntryKind.REALIZED,
            dreamId = dream.id
        )
        if (!isRealizedCheckBox.isChecked) {
            dream.isRealized = false
            dreamEntries = dreamEntries - realizedEntry
        }
        if (isRealizedCheckBox.isChecked) {
            dream.isRealized = true
            if (dreamEntries.none { it.kind == DreamEntryKind.REALIZED }) {
                dreamEntries = dreamEntries + newRealizedEntry
            }
        }
    }

    private fun onDeferredClicked(isChecked: Boolean) {
        dream.isDeferred = isChecked
        val deferredEntry = dreamEntries.filter { it.kind == DreamEntryKind.DEFERRED }
        val newDeferredEntry = DreamEntry(
            comment = "Dream Deferred",
            kind = DreamEntryKind.DEFERRED,
            dreamId = dream.id
        )
        if (!isDeferredCheckBox.isChecked) {
            dream.isDeferred = false
            dreamEntries = dreamEntries - deferredEntry
        }
        if (isDeferredCheckBox.isChecked) {
            dream.isDeferred = true
            if (dreamEntries.none { it.kind == DreamEntryKind.DEFERRED }) {
                dreamEntries = dreamEntries + newDeferredEntry
            }
        }
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    override fun onCommentProvided(comment: String) {
        val newEntry = DreamEntry(
            dreamId = dream.id,
            kind = DreamEntryKind.COMMENT,
            comment = comment
        )
        dreamEntries = dreamEntries + newEntry
        updateUI()
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    private fun setRevealedStyle(button: Button) {
        button.background.colorFilter = REVEALED_FILTER
        button.setTextColor(Color.WHITE)
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    private fun setDeferredStyle(button: Button) {
        button.background.colorFilter = DEFERRED_FILTER
        button.setTextColor(Color.WHITE)
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    private fun setRealizedStyle(button: Button) {
        button.background.colorFilter = REALIZED_FILTER
        button.setTextColor(Color.WHITE)
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    private fun setCommentStyle(button: Button) {
        button.background.colorFilter = COMMENT_FILTER
        button.setTextColor(Color.BLACK)
    }

    companion object {
        fun newInstance(dreamId: UUID): DreamDetailFragment {
            val args = Bundle().apply {
                putSerializable(ARG_DREAM_ID, dreamId)
            }
            return DreamDetailFragment().apply {
                arguments = args
            }
        }

        private const val REVEALED_COLOR = -0xff8946
        private const val REALIZED_COLOR = -0xff7100
        private const val DEFERRED_COLOR = -0x4ae900
        private const val COMMENT_COLOR = -0x2b87

        @RequiresApi(Build.VERSION_CODES.Q)
        private val REVEALED_FILTER = BlendModeColorFilter(REVEALED_COLOR, BlendMode.MULTIPLY)

        @RequiresApi(Build.VERSION_CODES.Q)
        private val DEFERRED_FILTER = BlendModeColorFilter(DEFERRED_COLOR, BlendMode.MULTIPLY)

        @RequiresApi(Build.VERSION_CODES.Q)
        private val REALIZED_FILTER = BlendModeColorFilter(REALIZED_COLOR, BlendMode.MULTIPLY)

        @RequiresApi(Build.VERSION_CODES.Q)
        private val COMMENT_FILTER = BlendModeColorFilter(COMMENT_COLOR, BlendMode.MULTIPLY)
    }
}
